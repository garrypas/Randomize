using System.Linq;
using System.Security.Cryptography;

namespace System.Collections.Generic
{
    public static class IEnumerableExtensions
    {
        private static readonly RandomNumberGenerator randomizer;

        static IEnumerableExtensions()
        {
            randomizer = new RandomNumberGenerator();
        }

        public static IEnumerable<T> Randomize<T>(this IEnumerable<T> collection)
        {
            return collection.OrderBy(r => randomizer.Randomize());
        }

        public static T ChooseRandom<T>(this IEnumerable<T> collection)
        {
            int randomIndex = Convert.ToInt32(Math.Floor(randomizer.Randomize() * collection.Count()));
            return collection.ElementAt(randomIndex);
        }

        private class RandomNumberGenerator : IDisposable
        {
            private RNGCryptoServiceProvider randomizer;

            public RandomNumberGenerator()
            {
                randomizer = new RNGCryptoServiceProvider();
            }

            public virtual double Randomize()
            {
                var result = new byte[8];
                randomizer.GetBytes(result);
                double randomWeightStrength = (double)BitConverter.ToUInt64(result, 0) / ulong.MaxValue;
                return randomWeightStrength;
            }

            private bool _disposed = false;

            public void Dispose()
            {
                Dispose(true);
                GC.SuppressFinalize(this);
            }

            protected virtual void Dispose(bool disposing)
            {
                if (!_disposed)
                {
                    if (disposing)
                    {
                        randomizer.Dispose();
                    }
                }
            }

            ~RandomNumberGenerator()
            {
                Dispose(false);
            }
        }
    }
}
